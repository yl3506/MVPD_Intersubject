# compare different length of training data
# visualization of mean variance explained raw (cross-within) subject
import os
import numpy as np
import matplotlib.pyplot as plt
import itertools as it
import scipy.stats as stats

# initialize parameters
### work_dir = '/Users/chloe/Documents/output_denoise_pca_1_cross/'
# work_dir = '/gsfs0/data/anzellos/data/forrest/half_output_global_compcorr_pc3_v3/'
# work_dir2 = '/gsfs0/data/anzellos/data/forrest/half_output_nodenoise_pc3_v3/'
work_dir = '/Users/chloe/Documents/Yichen/output_global_compcorr_pc3_v3/'
work_dir2 = '/Users/chloe/Documents/Yichen/output_nondenoise_pc3_v3/'
all_subjects = ['sub-01', 'sub-02', 'sub-04', 'sub-05', 'sub-09', 'sub-15', 'sub-16', 'sub-17', 'sub-18', 'sub-19', 'sub-20']
all_masks = ['rOFA', 'rFFA', 'rATL', 'rSTS', 'rTOS', 'rPPA', 'rPC']


data_within = []
nodenoise_within = []
# iterate through all within subject
for sub_index in range(0, len(all_subjects)):
	# initialize info
	subject = all_subjects[sub_index]
	sub_dir = work_dir + subject + '_to_' + subject + '/'
	sub_dir2 = work_dir2 + subject + '_to_' + subject + '/'
	data_within_dir = sub_dir + subject + '_to_' + subject + '_raw_ratio_chart.npy'
	data_within_dir2 = sub_dir2 + subject + '_to_' + subject + '_raw_ratio_chart.npy'
	# load data_within
	data_within.append(np.mean(np.load(data_within_dir)))
	nodenoise_within.append(np.mean(np.load(data_within_dir2)))
data_within_mean = np.mean(data_within)
nodenoise_within_mean = np.mean(nodenoise_within)


data_cross = []
nodenoise_cross = []
# iterate through all combinations of cross subjects 
for sub_1_index in range(0, len(all_subjects)):
	for sub_2_index in it.chain(range(0, sub_1_index), range(sub_1_index + 1, len(all_subjects))):
		# initialize info
		sub_1 = all_subjects[sub_1_index]
		sub_2 = all_subjects[sub_2_index]
		sub_dir = work_dir + sub_1 + '_to_' + sub_2 + '/'
		sub_dir2 = work_dir2 + sub_1 + '_to_' + sub_2 + '/'
		data_cross_dir = sub_dir + sub_1 + '_to_' + sub_2 + '_raw_ratio_chart.npy'
		data_cross_dir2 = sub_dir2 + sub_1 + '_to_' + sub_2 + '_raw_ratio_chart.npy'
		# load data_cross
		data_cross.append(np.mean(np.load(data_cross_dir)))
		nodenoise_cross.append(np.mean(np.load(data_cross_dir2)))

diff = (nodenoise_within_mean - nodenoise_cross) - (data_within_mean - data_cross)


# 8 runs:
diff1=[0.07727081,0.08806291,0.08410631,0.09228208,0.07881633,0.07504602,\
0.09524283,0.08920097,0.076235,0.0612151,0.07441627,0.1048739,\
0.09749011,0.10468371,0.08210424,0.09543601,0.10759361,0.10067565,\
0.07910031,0.09228862,0.0960276,0.10663535,0.09064732,0.1050651,\
0.08694275,0.10062674,0.0951573,0.08715785,0.09652552,0.08542718,\
0.08385916,0.09174552,0.07909435,0.08848728,0.08083829,0.08989946,\
0.08172422,0.08036029,0.07983254,0.06307039,0.08816841,0.10122582,\
0.09721144,0.08683025,0.09099842,0.09205642,0.10284558,0.09112943,\
0.0832142,0.08327116,0.08571186,0.08297047,0.08833577,0.08257808,\
0.10254188,0.09296418,0.08589456,0.08719404,0.09046238,0.06636167,\
0.0726811,0.08540089,0.08909938,0.08643485,0.09342857,0.08829698,\
0.09257397,0.08586506,0.08283792,0.07797798,0.09331081,0.10112685,\
0.08374777,0.08102336,0.10571859,0.08551938,0.09745862,0.07941077,\
0.07422396,0.08587915,0.09065603,0.09859826,0.08451784,0.0900007,\
0.09757576,0.08657635,0.09379095,0.08306058,0.0785756,0.07612315,\
0.07242614,0.07218988,0.09287481,0.08044956,0.08715131,0.08602546,\
0.0823453,0.06430879,0.08295253,0.08070114,0.05610578,0.08918848,\
0.08151669,0.05845755,0.08927665,0.06436802,0.07853358,0.0843446,\
0.07869051,0.08080224]

# 4 runs:
diff2=[0.04201742,0.09424529,0.08015857,0.08108244,0.09093581,0.06387147,\
0.09989007,0.08647769,0.07901291,0.05729942,0.06478827,0.12624265,\
0.09537721,0.1212789,0.0945017,0.08060863,0.12620384,0.10271416,\
0.09128073,0.09191003,0.09237404,0.10866265,0.08926063,0.09760949,\
0.10358944,0.11126305,0.10235371,0.09605657,0.10997103,0.09502941,\
0.07401155,0.0855665,0.08240867,0.07566418,0.08683576,0.09101789,\
0.09143799,0.08433545,0.08221188,0.03438915,0.07393926,0.10850847,\
0.09364299,0.07837432,0.11228244,0.10168266,0.10810406,0.0929097,\
0.10117866,0.08715128,0.08203868,0.04925905,0.08216845,0.08408787,\
0.09735003,0.0904608,0.07722541,0.08806181,0.08712206,0.07736224,\
0.04998107,0.03746675,0.09991936,0.08520027,0.0932481,0.09877333,\
0.10895525,0.09357402,0.07780653,0.07270316,0.10333555,0.1119064,\
0.08979928,0.09579695,0.11012897,0.08749666,0.11243345,0.08111914,\
0.10093389,0.08827286,0.08778657,0.09141164,0.09237478,0.08479912,\
0.0893821,0.09038186,0.09478034,0.08514847,0.08837774,0.07918155,\
0.05474072,0.03406045,0.10491837,0.08383777,0.09663367,0.09065418,\
0.07055324,0.09813659,0.09154043,0.09448659,0.06667341,0.0763408,\
0.08031506,0.03416525,0.09371652,0.06840335,0.08488617,0.0784603,\
0.07061232,0.08803514]

 # 2 runs:
diff3=[0.03175427,0.05019404,0.04400378,0.04596088,0.03613642,0.02827966,\
0.05524637,0.03657334,0.03709624,0.03829469,0.03912014,0.05022564,\
0.04465296,0.0514136,0.0289412,0.07705788,0.05945253,0.0472529,\
0.06622576,0.05286439,0.05617638,0.08035731,0.04414056,0.03935692,\
0.0166662,0.07983631,0.0464434,0.04502811,0.05972673,0.0456603,\
0.03934368,0.04445127,0.03532955,0.03022023,0.02674992,0.04477363,\
0.03831759,0.03086155,0.04036275,0.03804194,0.03985668,0.04945291,\
0.03270334,0.03729609,0.01951809,0.04746753,0.05305961,0.02684801,\
0.03477041,0.04279139,0.03678,0.02781989,0.01272679,0.03418595,\
0.02239424,0.04036503,0.01088876,0.02746834,0.02913811,0.02671891,\
0.01210823,0.0709033,0.06382614,0.04354633,0.04804979,0.05402829,\
0.0767876,0.05656252,0.06334984,0.04146472,0.07495177,0.07626181,\
0.01850194,0.0498703,0.05041848,0.01802444,0.08193392,0.03349555,\
0.06268958,0.04865109,0.04296174,0.04700062,0.02509568,0.03900926,\
0.02890042,0.02367957,0.05161474,0.02802916,0.03505938,0.04439227,\
0.01476344,0.04288238,0.04033381,0.04555853,0.04249983,0.01765124,\
0.05731624,0.02901123,0.04291192,0.02417565,-0.02762355,0.04021957,\
0.03477823,0.04287446,0.0431127,0.01752886,0.03055285,0.03927481,\
0.03781419,0.03556661]


print(stats.f_oneway(diff1, diff2, diff3))

# plt.scatter([0,1,2,3], [3,4,5,6])
plt.scatter(np.random.rand(len(diff1)), diff1, color='b', alpha=0.3)
plt.scatter(np.random.rand(len(diff2))+2, diff2, color='g', alpha=0.6)
plt.scatter(np.random.rand(len(diff3))+4, diff3, color='orange', alpha=0.9)

plt.show()

 



